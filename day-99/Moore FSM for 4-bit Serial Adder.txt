module moore_serial_adder(
input clk,rst,
input [3:0]A,B,
output reg sum_bit ,carry_out );
reg [1:0]ps,ns
reg [2:0]count;
reg carry;
parameter s0=2'd0;s1=2'd1,s2=2'd2,s3=2'd3,DONE=2'd0;
always @(posedge clk or posedge rst ) begin
if (rst)
ps<=s0;
count<=0;
carry<=0;
else 
ps<=ns;
end 
count<=count+1;
always @(*) begin
case(ps)
s0:ns=s1;
s1:ns=s2;
s2:ns=s3;
s3:ns=DONE;
default: ns=s0;
endcase
end
always @(posedge clk or posedge rst) begin
if(rst) begin
sum_bit<=0;
carry_out<=0;
end else  begin
case(ps)
s0:
{carry,sum_bit}<=A[0],B[0],+carry;
s1:
{carry,sum_bit}<=A[1],B[1],+carry;
s2:
{carry,sum_bit}<=A[2],B[2],+carry;
s3:
{carry,sum_bit}<=A[3],B[3],+carry;
carry_out <=carry;
end
endcase
end
end
endmodule
