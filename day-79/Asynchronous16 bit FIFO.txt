module asyn_fifo_16bit(
input   [15:0]data_in,
input wire w_en,r_en,
input wire clk_wr,clk_rd,
output reg [15:0]data_out,
output full,empty
    );
 parameter depth=16;
 reg [15:0]fifo_mem [0:depth-1];
 reg  [4:0]fifo_count=0;
 reg [3:0]w_ptr=0;
 reg [3:0]r_ptr=0;
 
 always @(posedge clk_wr)
 if(w_en && !full) begin
 fifo_mem[w_ptr] <= data_in;
 w_ptr <=w_ptr+1;
 fifo_count <=fifo_count+1;
 end
 
  always @(posedge clk_rd) begin
 if(r_en && !empty) begin
data_out <= fifo_mem[r_ptr];
 r_ptr <=r_ptr+1;
 fifo_count <=fifo_count-1;
 end
 end
 
 assign full= (fifo_count==depth);
 assign empty=(fifo_count==0);
  
endmodule
