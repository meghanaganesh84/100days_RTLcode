module tb_fifo_32bit_depth;
    reg clk, rst, w_en, r_en;
    reg [7:0] d_in;
    wire [7:0] d_out;
    wire fu, em;

    fifo_32bit_depth dut (
        .clk(clk),
        .rst(rst),
        .w_en(w_en),
        .r_en(r_en),
        .d_in(d_in),
        .d_out(d_out),
        .fu(fu),
        .em(em)
    );

    always #5 clk = ~clk;

    initial begin
        clk = 0;
        rst = 1;
        w_en = 0;
        r_en = 0;
        d_in = 8'b0;

        // Release reset
        #10 rst = 0;
        #10 rst = 1;

        // Write to FIFO
        @(posedge clk);
        w_en = 1;
        d_in = 8'b00000001;
        repeat(32) begin
            @(posedge clk);
            if (!fu) begin
                d_in = d_in + 1;
            end
        end
        w_en = 0;

        // Read from FIFO
        @(posedge clk);
        r_en = 1;
        while (~em) begin
            @(posedge clk);
        end
        r_en = 0;

        #10 $stop();
    end
endmodule
